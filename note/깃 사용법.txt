
# Git

 - .git 폴더가 위치한 폴더의 모든 내용을 관리해주는 프로그램
 - .git 폴더를 생성한 곳을 Repository라고 부른다
 - .git 폴더 내부에는 관리하는 Repository의 모든 정보가 기록되어 있다
 - .git에 저장된 기록을 활용하여 관리하는 Repository를 예쩐 모습으로 되돌릴 수 있다
 - Git은 Repository 내부의 무언가가 아주 약간만 변해도 모두 알아채고 관리해준다
 - Eclipse에는 Egit이라는 프로그램이 내장되어 있다
 - 레포지토리를 만들고 거기에 프로젝트를 생성한 뒤 깃 허브에 올리면 언제 어디서든 다시 해당 프로젝트를 사용할 수 있다
 - 레포지토리 폴더에 숨김 폴더 보면 .git이 있는데 여기에 수정사항들이 저장된다
 
 - 이클립스 메뉴 - windows - show view - other - git - git repository
 - create new repository - 경로 설정 말단 폴더가 레포 이름임
 - file - new - javaproject - use default location 체크해제 - 경로 레포지토리 밑 폴더로 지정 - 생성
 

# Commit

 - 레포지토리 내부의 변경 사항을 확정짓는 명령어
 - 커밋한 사점은 복구 지점이 된다
 - 체크 아웃 명령을 통해 언제든지 원하는 커밋으로 현재 상태(HEAD)를 옮겨 다닐 수 있다
 
 레포 우클릭 - commit
 레포 우클릭 - show in - history / 워킹트리에서 각 파일의 히스토리를 볼 수 있다
 
# staged와 unstaged의 차이점

 - 가장 최근의 커밋 이후로 변화가 있었던 파일들은 모두 unstaged 상태가 된다
   (이 때 .gitignore에 등록된 파일들은 변경 사항이 있어도 unstaged되지 않는다)
 - unstaged 상태인 변화들 중 이번 커밋에 포함시키고 싶은 것들만 골라서 staged 상태로 변경 후 커밋을 진행할 수 있다
 - 커밋 당시 unstaged 상태로 남겨놓는 파일들은 아직 더 만들어야 하는 코드들이고,
   staged 상태로 포함시킨 파일들은 다 만들어져서 상태를 보관하고자 하는 코드들이다
   
   히스토리에서 필터를 다 킨다
   예전 상태로 체크아웃하고 그 상태에서 커밋하면 기존에 작성했던 내용들로 다시는 갈 수 없다
   
# .gitignore

 - .gitignore 파일에 작성해둔 패턴과 일치하는 파일들은 Git의 관리 대상에서 제외된다
 - Eclipse 프로젝트를 사용할 때는 Eclipse 관련 파일들을 등록해놓는 것이 좋다 
   컴퓨터에 종속된 내용들이라 학원pc에서 집pc로 옮길 경우 에러가 발생할 수도 있고 이클립스에서만 쓰는 것이므로 다른 IDE를 쓰는 사람한텐 쓸모없는 파일이다
   (/bin/, .classpath, .project)
   
# Branch

 - 하나의 레포지토리를 다양한 형태로 보관할 수 있는 기능
 - 다른 브랜치로 변경하는 것도 체크아웃이라고 한다
 - 커밋하지 않은 상태로 다른 브랜치로 체크아웃하면 모든 작업내용이 사라지므로 주의해야한다
 - 한 프로젝트를 두 사람이 동시에 개발할 수도 있는 것임
 
# Merge

 - 한 브랜치를 다른 브랜치와 합치는 것
 - 합칠 때 한 파일의 같은 부분을 수정했다면 충돌(conflict)이 발생한다
 - 머지 도중 충돌이 발생한 경우 두 브랜치의 내용 중 하나를 선택하는 심사과정을 거쳐야 한다
 - 충돌이 없는 경우 쉽게 합쳐지기 때문에 같은 파일만 건드리지 않는다면 큰 문제는 발생하지 않는다